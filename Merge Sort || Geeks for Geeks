Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

Examples:

Input: arr[] = [4, 1, 3, 9, 7]
Output: [1, 3, 4, 7, 9]
Explanation: We get the sorted array after using merge sort
Input: arr[] = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: We get the sorted array after using merge sort 
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 105



##CODE

class Solution:
    def merge(self, arr, l, m, r):
        # Create temporary arrays
        left = arr[l:m+1]
        right = arr[m+1:r+1]
        
        i = j = 0
        k = l
        
        # Merge two sorted halves
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1
        
        # Copy leftovers
        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1
        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

    def mergeSort(self, arr, l, r):
        if l < r:
            m = (l + r) // 2
            # Sort first half
            self.mergeSort(arr, l, m)
            # Sort second half
            self.mergeSort(arr, m+1, r)
            # Merge them
            self.merge(arr, l, m, r)
        return arr
